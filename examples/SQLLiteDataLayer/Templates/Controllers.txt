package pgucontrollers

import (
	"fmt"
	Request "github.com/eshu0/RESTServer/pkg/request"
	hndlr "github.com/eshu0/Pangu/examples/Autogen/Todos/Handlers"
	models "github.com/eshu0/Pangu/examples/Autogen/Todos/Models"
	per "github.com/eshu0/persist/pkg/interfaces"

)

// Controller

type {{.StorageControllerName}} struct {
	{{.StorageHandlerName}} *hndlr.{{.StorageHandlerName}} // Storage handler
}

func New{{.StorageControllerName}}(handler *hndlr.{{.StorageHandlerName}}) *{{.StorageControllerName}} {
	ds := {{.StorageControllerName}}{}
	ds.{{.StorageHandlerName}} = handler
	return &ds
}

func (controller *{{.StorageControllerName}}) HandleRequest(request Request.ServerRequest) per.IQueryResult {  //.{{.StructDetails.Name}} {
	data := request.Payload.(models.{{.StructDetails.Name}})
	
	if request.Request.Method == "POST" {

		result := controller.{{.StorageHandlerName}}.Create(data)
		fmt.Println("----")
		fmt.Println("Result")
		fmt.Println("----")
		fmt.Println(result)
		return result

	} else if request.Request.Method == "PUT" { 
	
		result := controller.{{.StorageHandlerName}}.Update(data)
		fmt.Println("----")
		fmt.Println("Result")
		fmt.Println("----")
		fmt.Println(result)
		return result

	} else if request.Request.Method == "DELETE" { 
	
		result := controller.{{.StorageHandlerName}}.Update(data)
		fmt.Println("----")
		fmt.Println("Result")
		fmt.Println("----")
		fmt.Println(result)
		return result

	} else {
		
		Id := je.Server.RequestHelper.GetRequestId(r,"{{.StructDetails.Id.Name}}")

		result := controller.{{.StorageHandlerName}}.FindById(int64(Id))
		fmt.Println("----")
		fmt.Println("Result")
		fmt.Println("----")
		fmt.Println(result)
		return result
	}

}

func (controller *{{.StorageControllerName}}) HandleRemoveRequest(request Request.ServerRequest) per.IQueryResult {  //.{{.StructDetails.Name}} {
	data := request.Payload.(models.{{.StructDetails.Name}})
	result := controller.{{.StorageHandlerName}}.Update(data)
	fmt.Println("----")
	fmt.Println("Result")
	fmt.Println("----")
	fmt.Println(result)
	return result
}


func (controller *{{.StorageControllerName}}) HandleCreateRequest(request Request.ServerRequest) per.IQueryResult {  //.{{.StructDetails.Name}} {
	data := request.Payload.(models.{{.StructDetails.Name}})

	result := controller.{{.StorageHandlerName}}.Create(data)
	fmt.Println("----")
	fmt.Println("Result")
	fmt.Println("----")
	fmt.Println(result)
	return result
}

func (controller *{{.StorageControllerName}}) HandleUpdateRequest(request Request.ServerRequest) per.IQueryResult {  //.{{.StructDetails.Name}} {
	data := request.Payload.(models.{{.StructDetails.Name}})

	result := controller.{{.StorageHandlerName}}.Update(data)
	fmt.Println("----")
	fmt.Println("Result")
	fmt.Println("----")
	fmt.Println(result)
	return result
}


func (controller *{{.StorageControllerName}}) HandleFindByIdRequest(request Request.ServerRequest) per.IQueryResult { 
	data := request.Payload.(models.{{.StructDetails.Name}})

	result := controller.{{.StorageHandlerName}}.FindById(data.Id)
	fmt.Println("----")
	fmt.Println("Result")
	fmt.Println("----")
	fmt.Println(result)
	return result
}

func (controller *{{.StorageControllerName}}) HandleReadAllRequest(request Request.ServerRequest) per.IQueryResult { 
	result := controller.{{.StorageHandlerName}}.ReadAll()
	fmt.Println("----")
	fmt.Println("Result")
	fmt.Println("----")
	fmt.Println(result)
	return result
}


